void run_run_tumble()
{   
    sprintf(buffer, "Run and tumble\r\n");
    wait(100000);
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    int lastEvent = 0;
    double lambda = 0.60;
    InitTMR1();
    int distances[NB_SENSORS];		// array keeping the distance sensor readings
    int hitDistance = 1250;
    //int detectDistance = 10;
    //int wTime = 5000;
        
    int regspeed = 350;
    change_LEDs(FALSE);
    
    sprintf(buffer, "Finding Seed\r\n");
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    
    unsigned int randSeed = 0;
    followGetSensorValues(distances);
    randSeed += distances[0] + distances[4] + distances[7];
    randSeed += getGroundSensor(0);
    randSeed *= distances[1];
    srand(randSeed);
    
    LED1 = TRUE;
    LED7 = TRUE;
    wait(100);
    //__delay_ms(2000);
    //run(regspeed);
    //e_set_speed_left(200);
    //e_set_speed_right(200);
            
    double direction = (double)rand()/RAND_MAX*2.0*PI;
    //sprintf(buffer, "  Random Seed: %d %f \n ", randSeed, direction);
    //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    
    turnToDirection(direction);
    
    LED1 = FALSE;
    LED7 = FALSE;
    
    lastEvent = cntTimer;
    run(regspeed);
    
    sprintf(buffer, "Start Escaping\r\n");
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

    
    while (1) {
        // Get the sensor readings. They are large positive numbers around 
        // 1,000-3,500 when an object is very close, and close to 0 when no 
        // objects are close.
        followGetSensorValues(distances);
        
        // Every 
        // cntTimer is an incrementing from some other process, it is actual time
        if (cntTimer != lastEvent){
            // Calculate the turning rate
            

            double tmp = (double)rand()/RAND_MAX;
//            sprintf(buffer, "  Ground Data: ld = %.3f %.3f\n", lambda, tmp);
//            e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

            // Check for tumble
            if (tmp < lambda*0.1){
                // Choose a new direction at random
                direction = (double)rand()/RAND_MAX*2.0*PI;
                sprintf(buffer, "  Tumble\n");
                e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

                // Turn into that direction
                turnToDirection(direction);
                run(regspeed); // set both wheels speed to  350
            }
            lastEvent = cntTimer;
        }
        
        
        if(distances[3] > hitDistance || distances[4] > hitDistance )
        {
            sprintf(buffer, "\r\nSomething hit!\r\n");
            e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
            
            change_LEDs(TRUE);

            run(0); // stop motor
            //__delay_ms(30);
            
           wait(100000000);          
        }
        
        /*
        
        for (i=0; i<3; i++){
            groundval[i] = getGroundSensor(i);
        }
        sprintf(buffer, "\r\n left= %d\r\n centre = %d\r\n right = %d \r\n", groundval[0],groundval[1],groundval[2]);
        e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
        */
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////


void run_sample_ground_col()
{   
    sprintf(buffer, "Sample ground\r\n");
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    wait(100000);

    int i;  
    InitTMR1();
    
    int groundval[3];
    int groundmeanfun, groundmean;
    
    change_LEDs(TRUE);
    
    while (1) {
        
        wait(500);
        for (i=0; i<3; i++){
            groundval[i] = getGroundSensor(i);
        }
        
        groundmean=0;
        for(i=0; i<3; i++){
            groundmean += groundval[i];
        }
        groundmean /= 3;
        
        getmeanGround(&groundmeanfun);
        
        sprintf(buffer, "\r\n left= %d\r\t centre = %d\r\t right = %d \r\t mean = %d \r\t meanfun = %d \r\n", groundval[0],groundval[1],groundval[2], groundmean, groundmeanfun);
        e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
        wait(1000000000);
        
    }
    
    
}




////////////////////////////////////////////////////////////////////////////////////
void run_ground_sense_test()
{   
    sprintf(buffer, "Ground sensor test\r\n");
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    wait(100000);
    
    //char testbuf[100];
    //e_bt_read_local_pin_number(testbuf);
    //sprintf(buffer,"\n\rPIN code = %s",local_bt_PIN);
    //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    
    int i;  
    InitTMR1();
    int distances[NB_SENSORS];		// array keeping the distance sensor readings
    int hitDistance = 2050;
    
    int groundval[3]; // slanted for removal, once this shit works
    //int meangroundval;
    int nmean = 3;
    int runningmean_v[nmean];
    int runningmean;
        
    int regspeed = 0;//350;
    change_LEDs(FALSE);
    
    // initialise running mean
    getmeanGround(&runningmean_v[0]);
    
    for (i=1; i<nmean; i++){
            runningmean_v[i] = runningmean_v[0];
        }
    
    
    LED1 = TRUE;
    LED7 = TRUE;
    wait(100);
    //__delay_ms(2000);

    run(regspeed);
    
    //sprintf(buffer, "Start Escaping\r\n");
    //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

    
    while (1) {
        // Get the sensor readings. They are large positive numbers around 
        // 1,000-3,500 when an object is very close, and close to 0 when no 
        // objects are close.
        followGetSensorValues(distances);
        
        if(distances[0] > hitDistance || distances[1] > hitDistance || distances[6] > hitDistance || distances[7] > hitDistance)
        {
            sprintf(buffer, "\r\nSomething hit!\r\n");
            e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
            run(0); // stop motor
            //__delay_ms(30);
            
            change_LEDs(TRUE);
            wait(1000000000);
        }
        
        wait(10);
        for (i=0; i<3; i++){
            groundval[i] = getGroundSensor(i);
        }
        
        // update the running mean, less than nmean-1, so highest value nmean-2
        for(i=0; i<nmean-1; i++){
            runningmean_v[i]=runningmean_v[i+1];
        }
        getmeanGround(&runningmean_v[nmean-1]);
// print appropriate mean to test in matlab, compute mean from running vector, print that as well
        runningmean = 0;
        for(i=0; i<nmean; i++){
            runningmean += runningmean_v[i];
        }
        runningmean /= nmean;
       
        sprintf(buffer, "%d, %d, %d, %d, %d \r\n", groundval[0],groundval[1],groundval[2], runningmean_v[nmean-1], runningmean);
        e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
        
    }
    
    
}






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void run_collision_test()
{   
    sprintf(buffer, "IR test\r\n");
    wait(100000);
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    int lastEvent = 0; 
    InitTMR1();
    int distances[NB_SENSORS];		// array keeping the distance sensor readings
    int hitDistance = 1000;
        
    //int regspeed = 350;
    //int avoidspeed = 300;
    change_LEDs(FALSE);
    
    
    LED1 = TRUE;
    LED7 = TRUE;
    wait(100);
    //__delay_ms(2000);
    
    //lastEvent = cntTimer;
    run(0);
    
    sprintf(buffer, "Start Escaping\r\n");
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

    
    while (1) {
        // Get the sensor readings. They are large positive numbers around 
        // 1,000-3,500 when an object is very close, and close to 0 when no 
        // objects are close.
        followGetSensorValues(distances);
        
        if(distances[0] > hitDistance || distances[1] > hitDistance || distances[6] > hitDistance || distances[7] > hitDistance)
        {
            sprintf(buffer, "%d, %d, %d, %d, %d, %d\r\n",distances[5], distances[6], distances[7], distances[0], distances[1], distances[2]);
            e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
            LED2 = TRUE;
            LED6 = TRUE;
            run(0); // stop motor
            //__delay_ms(30);
                     
        }
        wait(1000);
        
        
    }
    
    
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void run_escape()
{   
    sprintf(buffer, "Escape\r\n");
    wait(100000);
    e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    int lastEvent = 0, i;  
    double lambda = 0.2;
    InitTMR1();
    int distances[NB_SENSORS];		// array keeping the distance sensor readings
    int hitDistance = 1950;
    int groundval[3]; // slanted for removal, once this shit works
    int nmean = 3;
    int runningmean_v[nmean];
    int runningmean;
        
    int regspeed = 325;
    change_LEDs(FALSE);
    
    //sprintf(buffer, "Finding Seed\r\n");
    //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    
    unsigned int randSeed = 0;
    followGetSensorValues(distances);
    randSeed += distances[0] + distances[4] + distances[7];
    randSeed += getGroundSensor(0);
    randSeed *= distances[1];
    srand(randSeed);
    
    
    wait(100);
    //__delay_ms(2000);
    //run(regspeed);
    
// ** turn into some random initial direction
    double direction = (double)rand()/RAND_MAX*2.0*PI;
    //sprintf(buffer, "  Random Seed: %d %f \n ", randSeed, direction);
    //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
    turnToDirection(direction);
    
// ** setup completed, wait for signal from Matlab
    waitforSignalChar('1');

// ** set LEDs, get ground values, start moving
    change_LEDs(FALSE);
    LED1 = TRUE;
    LED7 = TRUE;
    
    getmeanGround(&runningmean_v[0]);
    for (i=1; i<nmean; i++){
            runningmean_v[i] = runningmean_v[0];
        }
    
    lastEvent = cntTimer;
    int cntstart = cntTimer;
    int counter = 0;
    run(regspeed);
    
    while (1) {
        // Every 100ms have chance of lambda to turn to some dir
        if (cntTimer != lastEvent){
            // Calculate the turning rate
            double tmp = (double)rand()/RAND_MAX;
            // Check for tumble
            if (tmp < lambda){
                // Choose a new direction at random
                direction = (double)rand()/RAND_MAX*2.0*PI;
                //sprintf(buffer, "  Tumble\n");
                //e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());

                // Turn into that direction
                turnToDirection(direction);
                run(regspeed); // set both wheels speed to regspeed
            }
            lastEvent = cntTimer;
        }
        
        // Get the sensor readings. They are large positive numbers around 
        // 1,000-3,500 when an object is very close, and close to 0 when no 
        // objects are close.
        followGetSensorValues(distances);

        if(distances[0] > hitDistance || distances[1] > hitDistance || distances[6] > hitDistance || distances[7] > hitDistance)
        {
            LED2 = TRUE;
            LED6 = TRUE;
            run(0); // stop motor
            wait(2000);
            sprintf(buffer, "0, 0, 0, 0, 0, 0, 0, 0\r\n");
            e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
            // ****************** just for now
               wait(1000000);
            // ******************
            //__delay_ms(30);
            
            if(distances[0]>distances[7]) {
                turnToDirection(-PI/2);
                
            }
            else if(distances[0]<distances[7]) {
                turnToDirection(PI/2);
            }
                    
            run(regspeed);
            LED2 = FALSE;
            LED6 = FALSE;           
        }
        
        // update the running mean, less than nmean-1, so highest value nmean-2
        for(i=0; i<nmean-1; i++){
            runningmean_v[i]=runningmean_v[i+1];
        }
        //getmeanGround(&runningmean_v[nmean-1]);
        getmeanGroundAll(&runningmean_v[nmean-1], &groundval);
                        
        // print appropriate mean to test in matlab, compute mean from running vector, print that as well
        runningmean = 0;
        for(i=0; i<nmean; i++){
            runningmean += runningmean_v[i];
        }
        runningmean /= nmean;
        
        counter++;
        
        sprintf(buffer, "%d, %d, %d, %d, %d, %d, %d, %d \r\n", selector, groundval[0],groundval[1],groundval[2], runningmean_v[nmean-1], runningmean,cntTimer-cntstart, counter );
        e_send_uart1_char(buffer, strlen(buffer)); while(e_uart1_sending());
        
    }
}